SRC:https://vitux.com/install-and-deploy-kubernetes-on-ubuntu/


#apt install docker.io -y
#systemctl enable docker
#curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
#apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
#apt install kubeadm -y
#kubeadm version
#hostnamectl set-hostname master-node
#hostname
****EXIT AND ENTER TERMINAL AGAIN TO SEE HOSTNAME CHANGE
#kubectl
	root@master-node:/home/ubuntu# kubectl
	kubectl controls the Kubernetes cluster manager.

	 Find more information at:
	https://kubernetes.io/docs/reference/kubectl/overview/

	Basic Commands (Beginner):
	  create         Create a resource from a file or from stdin.
	 ....

#sudo kubeadm init --pod-network-cidr=10.0.1.0/24
LOT OF EXECUTION STUFF AND ...
Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

kubeadm join 172.31.80.177:6443 --token jrqods.9vxu90m49j52tzeg \
    --discovery-token-ca-cert-hash sha256:d196a702ff6b9a9bf9bb3b925dc1847829df5a5b9a20f3c263f297f8011b73c2




#mkdir -p $HOME/.kube
#sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
#sudo chown $(id -u):$(id -g) $HOME/.kube/config

##############################################################
kubeadm join 172.31.80.177:6443 --token jrqods.9vxu90m49j52tzeg \
    --discovery-token-ca-cert-hash sha256:d196a702ff6b9a9bf9bb3b925dc1847829df5a5b9a20f3c263f297f8011b73c2
##############################################################




ubuntu@master-node:~$ kubectl get nodes
NAME          STATUS     ROLES    AGE     VERSION
master-node   NotReady   master   4m31s   v1.15.1

ubuntu@master-node:~$ kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
podsecuritypolicy.extensions/psp.flannel.unprivileged created
clusterrole.rbac.authorization.k8s.io/flannel created
clusterrolebinding.rbac.authorization.k8s.io/flannel created
serviceaccount/flannel created
configmap/kube-flannel-cfg created
daemonset.extensions/kube-flannel-ds-amd64 created
daemonset.extensions/kube-flannel-ds-arm64 created
daemonset.extensions/kube-flannel-ds-arm created
daemonset.extensions/kube-flannel-ds-ppc64le created
daemonset.extensions/kube-flannel-ds-s390x created


ubuntu@master-node:~$ kubectl get pods --all-namespaces
NAMESPACE     NAME                                  READY   STATUS    RESTARTS   AGE
kube-system   coredns-5c98db65d4-dn9ds              1/1     Running   0          8m9s
kube-system   coredns-5c98db65d4-khmr8              1/1     Running   0          8m9s
kube-system   etcd-master-node                      1/1     Running   0          7m10s
kube-system   kube-apiserver-master-node            1/1     Running   0          7m33s
kube-system   kube-controller-manager-master-node   1/1     Running   0          7m30s
kube-system   kube-flannel-ds-amd64-mt5sb           1/1     Running   0          2m27s
kube-system   kube-proxy-b865s                      1/1     Running   0          8m9s
kube-system   kube-scheduler-master-node            1/1     Running   0          7m16s



ubuntu@master-node:~$ kubectl get nodes
NAME          STATUS   ROLES    AGE     VERSION
master-node   Ready    master   9m26s   v1.15.1


TRYING TO JOIN SLAVE TO MASTER

root@slave-node:/home/ubuntu# kubeadm join 172.31.80.177:6443 --token jrqods.9vxu90m49j52tzeg \
>     --discovery-token-ca-cert-hash sha256:d196a702ff6b9a9bf9bb3b925dc1847829df5a5b9a20f3c263f297f8011b73c2
[preflight] Running pre-flight checks
	[WARNING IsDockerSystemdCheck]: detected "cgroupfs" as the Docker cgroup driver. The recommended driver is "systemd". Please follow the guide at https://kubernetes.io/docs/setup/cri/
error execution phase preflight: couldn't validate the identity of the API Server: abort connecting to API servers after timeout of 5m0s

BUT COMMAND FREEZES:
SOLUTIONS TO ISSUES:
1.yes, cluster-ip is different than node ip.
IMO, when you add a client node through kubeadm join command, your port 6443 on master should be listening and your token should hold good. I suggest verify these,

sudo netstat -tuplen on master. verify that port 6443 is listening & from your client node do a telnet to port 6443 on master node ip. if this is working, the other thing which plays a role is your token. you can create a new token using below command on master node, if that works for you.
sudo kubadm token create --print-join-command
use the command generated in step2 to join your node with a new token


BUT ACTUAL SOLUTION IS:
Open 6443 port in inbound for security group.


ubuntu@slave-node:~$ kubectl get nodes
The connection to the server localhost:8080 was refused - did you specify the right host or port?

ISSUE:
SOLUTION: this command doesnt run on slave node.

ubuntu@master-node:~$ kubectl get nodes
NAME          STATUS   ROLES    AGE     VERSION
master-node   Ready    master   24m     v1.15.1
slave-node    Ready    <none>   5m44s   v1.15.1



ubuntu@master-node:~$ kubectl delete -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml
podsecuritypolicy.extensions "psp.flannel.unprivileged" deleted
clusterrole.rbac.authorization.k8s.io "flannel" deleted
clusterrolebinding.rbac.authorization.k8s.io "flannel" deleted
serviceaccount "flannel" deleted
configmap "kube-flannel-cfg" deleted
daemonset.extensions "kube-flannel-ds-amd64" deleted
daemonset.extensions "kube-flannel-ds-arm64" deleted
daemonset.extensions "kube-flannel-ds-arm" deleted
daemonset.extensions "kube-flannel-ds-ppc64le" deleted
daemonset.extensions "kube-flannel-ds-s390x" deleted

